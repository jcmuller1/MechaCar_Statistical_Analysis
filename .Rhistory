install.packages("tidyverse")
pwd
wd
getwd()
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
library(dplyr)
mpg <- read.csv("MechaCar_mpg.csv")
setwd("~/UT Data Bootcamp/Challenges/MechaCar_Statistical_Analysis")
mpg <- read.csv("MechaCar_mpg.csv")
?lm()
mpg_data <- read.csv("MechaCar_mpg.csv")
library(dplyr)
mpg_data <- read.csv("MechaCar_mpg.csv")
?lm()
lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=mpg_data)
lm(mpg_data.vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=mpg_data)
lm(qsec ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=mpg_data)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=mpg_data)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_data)
mpg.fit = lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mpg_data)
mpg.fit
summary(mpg.fit)
yvals <- mpg.fit$coefficients['vehicle_length']*mpg_data$vehicle_length +
mpg.fit$coefficients['vehicle_weight']*mpg_data$vehicle_weight +
mpg.fit$coefficients['spoiler_angle']*mpg_data$spoiler_angle +
mpg.fit$coefficients['ground_clearance']*mpg_data$ground_clearance +
mpg.fit$coefficients['AWD']*mpg_data$AWD +
mpg.fit$coefficients['(Intercept')]
yvals <- mpg.fit$coefficients['vehicle_length']*mpg_data$vehicle_length +
mpg.fit$coefficients['vehicle_weight']*mpg_data$vehicle_weight +
mpg.fit$coefficients['spoiler_angle']*mpg_data$spoiler_angle +
mpg.fit$coefficients['ground_clearance']*mpg_data$ground_clearance +
mpg.fit$coefficients['AWD']*mpg_data$AWD +
mpg.fit$coefficients['(Intercept)']
plt <- ggplot(mpg_data, aes=(x=yvals,y=mpg))
plt <- ggplot(mpg_data,aes=(x=mpg))
library(ggplot2)
plt <- ggplot(mpg_data,aes=(x=mpg))
plt <- ggplot(mpg_data,aes=(x=mpg)).show()
plt <- ggplot(mpg_data,aes=(x=mpg,y=yvals))
?ggplot()
plt <- ggplot(mpg_data,aes=(x=mpg,y=yvals))
plt <- ggplot(mpg_data,aes(x=AWD))
ggplot(mpg_data,aes(x=AWD))
ggplot(mpg_data,aes(x=AWD,y=mpg))
ggplot(mpg_data,aes(x=AWD,y=mpg))
plt <- ggplot(mpg_data,aes(x=mpg,y=AWS))
plt + geom_point() + geom_line(aes(y=yvals),color = "red")
plt <- ggplot(mpg_data,aes(x=mpg,y=AWD))
plt + geom_point() + geom_line(aes(y=yvals),color = "red")
plt <- ggplot(mpg_data,aes(x=mpg,y=yvals))
plt + geom_point# + geom_line(aes(y=yvals),color = "red")
plt + geom_point() # + geom_line(aes(y=yvals),color = "red")
plt + geom_point() + xlab("Reported MPG") + ylab("Predicted MPG") # + geom_line(aes(y=yvals),color = "red")
cor(yvals,mpg_data$mpg) #calculate correlation coefficient
r = cor(yvals,mpg_data$mpg) #calculate correlation coefficient
plt + geom_point() + geom_line(r) + xlab("Reported MPG") + ylab("Predicted MPG") # + geom_line(aes(y=yvals),color = "red")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
coil <- read.csv("Suspension_Coil.csv")
coil_summary <- coil %>% summarize(PSI=n(), .groups = 'keep')
coil_summary <- coil %>% summarize(Mean=mean(PSI), .groups = 'keep')
coil_summary <- coil %>% summarize(Mean=mean(PSI),Median=median(PSI), .groups = 'keep')
coil_summary <- coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI),SD=stdev(PSI), .groups = 'keep')
coil_summary <- coil %>% summarize(Mean=mean(PSI),Median=median(PSI),sd=stdev(PSI), .groups = 'keep')
coil_summary <- coil %>% summarize(Mean=mean(PSI),Median=median(PSI),SD=sd(PSI), .groups = 'keep')
coil_summary <- coil %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
coil_summary
View(coil_summary)
View(coil_summary)
lot_summary <- coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
lot_summary
View(lot_summary)
View(lot_summary)
t.test(coil$PSI,mu=mean(coil$PSI))
?t.test()
t.test(coil$PSI,mu=1500)
t.test(subset(coil$PSI,coil$Manufacturing_Lot=="Lot1"),mu=1500)
t.test(subset(coil$PSI,coil$Manufacturing_Lot=="Lot2"),mu=1500)
t.test(subset(coil$PSI,coil$Manufacturing_Lot=="Lot3"),mu=1500)
